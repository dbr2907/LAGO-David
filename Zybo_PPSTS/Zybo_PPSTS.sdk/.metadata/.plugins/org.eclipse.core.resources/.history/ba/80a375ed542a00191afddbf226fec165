/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"

#define TIMER_ID	1
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL
#define TIMER_CHECK_THRESHOLD	9
/*-----------------------------------------------------------*/
/* The Tx and Rx tasks as described at the top of this file. */
static void P1Task( void *pvParameters );
static void P2Task( void *pvParameters );
/*-----------------------------------------------------------*/
/* The queue used by the Tx and Rx tasks, as described at the top of this
file. */
static TaskHandle_t Print1H;
static TaskHandle_t Print2H;


int main( void ){
	xil_printf( "Hello from Freertos example main\r\n" );
	/* Create the two tasks.  The Tx task is given a lower priority than the
	Rx task, so the Rx task will leave the Blocked state and pre-empt the Tx
	task as soon as the Tx task places an item in the queue. */
	xTaskCreate(P1Task, 					/* The function that implements the task. */
					( const char * ) "Print1", 		/* Text name for the task, provided to assist debugging only. */
					configMINIMAL_STACK_SIZE, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY+1,			/* The task runs at the idle priority. */
					&Print1H );

	xTaskCreate(P2Task,
				 ( const char * ) "Print2",
				 configMINIMAL_STACK_SIZE,
				 NULL,
				 tskIDLE_PRIORITY + 1,
				 &Print2H );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();

	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
}

/*-----------------------------------------------------------*/
static void P1Task( void *pvParameters ){
	for(;;){
		print("Tarea 1");
	}
}
/*-----------------------------------------------------------*/
static void P2Task( void *pvParameters ){
	for(;;){
		print("Tarea 2");
	}
}
/*-----------------------------------------------------------*/
